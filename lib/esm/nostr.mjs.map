{
  "version": 3,
  "sources": ["../../keygen.ts", "../../index.ts"],
  "sourcesContent": ["import * as ed25519 from '@noble/ed25519'\nimport {hkdf} from '@noble/hashes/hkdf'\nimport {sha256} from '@noble/hashes/sha256'\n\nvar _fetch: any\n\ntry {\n  _fetch = fetch\n} catch {}\n\nexport function useFetchImplementation(fetchImplementation: any) {\n  _fetch = fetchImplementation\n}\n\nfunction Stringify(arg: any) {\n  return JSON.parse(JSON.stringify(arg, (key, value) =>\n      typeof value === 'bigint'\n          ? value.toString()\n          : value // return everything else unchanged\n  ));\n}\n\n/**\n *\n * @param username key identifier\n * @param caip10 CAIP identifier for the blockchain account\n * @param sig Deterministic signature from X-wallet provider\n * @param password Optional password\n * @returns Deterministic private key as hex string\n */\nexport async function ed25519Keygen(\n  username: string,\n  caip10: string,\n  sig: string,\n  password: string | undefined\n): Promise<[bigint, any]> {\n  if (sig.length < 64)\n    throw new Error('Signature too short; length should be 65 bytes')\n  let inputKey = sha256(\n    ed25519.utils.hexToBytes(\n      sig.toLowerCase().startsWith('0x') ? sig.slice(2) : sig\n    )\n  )\n  let info = `${caip10}:${username}`\n  let salt = sha256(`${info}:${password ? password : ''}:${sig.slice(-64)}`)\n  let hashKey = hkdf(sha256, inputKey, salt, info, 42)\n  let privateKey = ed25519.utils.hashToPrivateScalar(hashKey)\n  let publicKey = await ed25519.getPublicKey(privateKey)\n  return [Stringify(privateKey), ed25519.utils.bytesToHex(publicKey)]\n}\n\n", "export * as keygen from './keygen'\n\n// monkey patch secp256k1\nimport * as secp256k1 from '@noble/secp256k1'\nimport {hmac} from '@noble/hashes/hmac'\nimport {sha256} from '@noble/hashes/sha256'\nsecp256k1.utils.hmacSha256Sync = (key, ...msgs) =>\n  hmac(sha256, key, secp256k1.utils.concatBytes(...msgs))\nsecp256k1.utils.sha256Sync = (...msgs) =>\n  sha256(secp256k1.utils.concatBytes(...msgs))\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAY,aAAa;AACzB,SAAQ,YAAW;AACnB,SAAQ,cAAa;AAErB,IAAI;AAEJ,IAAI;AACF,WAAS;AACX,QAAE;AAAO;AAEF,SAAS,uBAAuB,qBAA0B;AAC/D,WAAS;AACX;AAEA,SAAS,UAAU,KAAU;AAC3B,SAAO,KAAK,MAAM,KAAK;AAAA,IAAU;AAAA,IAAK,CAAC,KAAK,UACxC,OAAO,UAAU,WACX,MAAM,SAAS,IACf;AAAA,EACV,CAAC;AACH;AAUA,eAAsB,cACpB,UACA,QACA,KACA,UACwB;AACxB,MAAI,IAAI,SAAS;AACf,UAAM,IAAI,MAAM,gDAAgD;AAClE,MAAI,WAAW;AAAA,IACL,cAAM;AAAA,MACZ,IAAI,YAAY,EAAE,WAAW,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI;AAAA,IACtD;AAAA,EACF;AACA,MAAI,OAAO,GAAG,UAAU;AACxB,MAAI,OAAO,OAAO,GAAG,QAAQ,WAAW,WAAW,MAAM,IAAI,MAAM,GAAG,GAAG;AACzE,MAAI,UAAU,KAAK,QAAQ,UAAU,MAAM,MAAM,EAAE;AACnD,MAAI,aAAqB,cAAM,oBAAoB,OAAO;AAC1D,MAAI,YAAY,MAAc,qBAAa,UAAU;AACrD,SAAO,CAAC,UAAU,UAAU,GAAW,cAAM,WAAW,SAAS,CAAC;AACpE;;;AC9CA,YAAY,eAAe;AAC3B,SAAQ,YAAW;AACnB,SAAQ,UAAAA,eAAa;AACX,gBAAM,iBAAiB,CAAC,QAAQ,SACxC,KAAKA,SAAQ,KAAe,gBAAM,YAAY,GAAG,IAAI,CAAC;AAC9C,gBAAM,aAAa,IAAI,SAC/BA,QAAiB,gBAAM,YAAY,GAAG,IAAI,CAAC;",
  "names": ["sha256"]
}
